// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE Email = $1
) AS EXISTS
`

func (q *Queries) CheckUserExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (ID, Email, Name, Password)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	ID       uuid.UUID
	Email    string
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Password,
	)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, name, password FROM users WHERE Email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
	)
	return i, err
}
