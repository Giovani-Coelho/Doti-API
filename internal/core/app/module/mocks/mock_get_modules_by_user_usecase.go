// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/app/module/get_modules_by_user_usecase.go

// Package mock_modulecase is a generated GoMock package.
package mock_modulecase

import (
	context "context"
	reflect "reflect"

	moduledomain "github.com/Giovani-Coelho/Doti-API/internal/core/domain/module"
	gomock "github.com/golang/mock/gomock"
)

// MockGetByUser is a mock of GetByUser interface.
type MockGetByUser struct {
	ctrl     *gomock.Controller
	recorder *MockGetByUserMockRecorder
}

// MockGetByUserMockRecorder is the mock recorder for MockGetByUser.
type MockGetByUserMockRecorder struct {
	mock *MockGetByUser
}

// NewMockGetByUser creates a new mock instance.
func NewMockGetByUser(ctrl *gomock.Controller) *MockGetByUser {
	mock := &MockGetByUser{ctrl: ctrl}
	mock.recorder = &MockGetByUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetByUser) EXPECT() *MockGetByUserMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetByUser) Execute(ctx context.Context, userId string) ([]moduledomain.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, userId)
	ret0, _ := ret[0].([]moduledomain.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetByUserMockRecorder) Execute(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetByUser)(nil).Execute), ctx, userId)
}
