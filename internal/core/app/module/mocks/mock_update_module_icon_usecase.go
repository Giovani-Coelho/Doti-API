// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/app/module/update_icon_module_usecase.go

// Package mock_modulecase is a generated GoMock package.
package mock_modulecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateIcon is a mock of UpdateIcon interface.
type MockUpdateIcon struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateIconMockRecorder
}

// MockUpdateIconMockRecorder is the mock recorder for MockUpdateIcon.
type MockUpdateIconMockRecorder struct {
	mock *MockUpdateIcon
}

// NewMockUpdateIcon creates a new mock instance.
func NewMockUpdateIcon(ctrl *gomock.Controller) *MockUpdateIcon {
	mock := &MockUpdateIcon{ctrl: ctrl}
	mock.recorder = &MockUpdateIconMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateIcon) EXPECT() *MockUpdateIconMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateIcon) Execute(ctx context.Context, moduleId, icon string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, moduleId, icon)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateIconMockRecorder) Execute(ctx, moduleId, icon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateIcon)(nil).Execute), ctx, moduleId, icon)
}
