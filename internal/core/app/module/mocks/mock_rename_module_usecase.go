// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/app/module/rename_module_usecase.go

// Package mock_modulecase is a generated GoMock package.
package mock_modulecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRename is a mock of Rename interface.
type MockRename struct {
	ctrl     *gomock.Controller
	recorder *MockRenameMockRecorder
}

// MockRenameMockRecorder is the mock recorder for MockRename.
type MockRenameMockRecorder struct {
	mock *MockRename
}

// NewMockRename creates a new mock instance.
func NewMockRename(ctrl *gomock.Controller) *MockRename {
	mock := &MockRename{ctrl: ctrl}
	mock.recorder = &MockRenameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRename) EXPECT() *MockRenameMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRename) Execute(ctx context.Context, id, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockRenameMockRecorder) Execute(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRename)(nil).Execute), ctx, id, name)
}
