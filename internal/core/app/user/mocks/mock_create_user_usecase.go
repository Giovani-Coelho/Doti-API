// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/app/user/create_user_usecase.go

// Package mock_usercase is a generated GoMock package.
package mock_usercase

import (
	context "context"
	reflect "reflect"

	userdomain "github.com/Giovani-Coelho/Doti-API/internal/core/domain/user"
	gomock "github.com/golang/mock/gomock"
)

// MockCreate is a mock of Create interface.
type MockCreate struct {
	ctrl     *gomock.Controller
	recorder *MockCreateMockRecorder
}

// MockCreateMockRecorder is the mock recorder for MockCreate.
type MockCreateMockRecorder struct {
	mock *MockCreate
}

// NewMockCreate creates a new mock instance.
func NewMockCreate(ctrl *gomock.Controller) *MockCreate {
	mock := &MockCreate{ctrl: ctrl}
	mock.recorder = &MockCreateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreate) EXPECT() *MockCreateMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreate) Execute(ctx context.Context, userEntity userdomain.User) (userdomain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, userEntity)
	ret0, _ := ret[0].(userdomain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateMockRecorder) Execute(ctx, userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreate)(nil).Execute), ctx, userEntity)
}
