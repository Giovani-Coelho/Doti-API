// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: module_query.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkModuleExists = `-- name: CheckModuleExists :one
SELECT EXISTS (
    SELECT 1 
    FROM modules 
    WHERE id = $1
) AS EXISTS
`

func (q *Queries) CheckModuleExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkModuleExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createModule = `-- name: CreateModule :one
INSERT INTO modules (id, user_id, Name, is_open, icon, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, name, is_open, icon, created_at, updated_at
`

type CreateModuleParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Name      string    `json:"name"`
	IsOpen    bool      `json:"is_open"`
	Icon      string    `json:"icon"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateModule(ctx context.Context, arg CreateModuleParams) (Module, error) {
	row := q.db.QueryRowContext(ctx, createModule,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.IsOpen,
		arg.Icon,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Module
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.IsOpen,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteModule = `-- name: DeleteModule :exec
DELETE FROM modules WHERE id = $1
`

func (q *Queries) DeleteModule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteModule, id)
	return err
}

const listModuleByUserID = `-- name: ListModuleByUserID :many
SELECT id, user_id, name, is_open, icon, created_at, updated_at 
FROM modules
WHERE user_id = $1 ORDER BY created_at ASC
`

func (q *Queries) ListModuleByUserID(ctx context.Context, userID uuid.UUID) ([]Module, error) {
	rows, err := q.db.QueryContext(ctx, listModuleByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Module
	for rows.Next() {
		var i Module
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.IsOpen,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIcon = `-- name: UpdateIcon :exec
UPDATE modules 
SET icon = $1
WHERE id = $2
`

type UpdateIconParams struct {
	Icon string    `json:"icon"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateIcon(ctx context.Context, arg UpdateIconParams) error {
	_, err := q.db.ExecContext(ctx, updateIcon, arg.Icon, arg.ID)
	return err
}

const updateModuleName = `-- name: UpdateModuleName :exec
UPDATE modules 
SET name = $2
WHERE id = $1
`

type UpdateModuleNameParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateModuleName(ctx context.Context, arg UpdateModuleNameParams) error {
	_, err := q.db.ExecContext(ctx, updateModuleName, arg.ID, arg.Name)
	return err
}
