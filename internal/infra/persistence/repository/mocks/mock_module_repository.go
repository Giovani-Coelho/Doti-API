// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/persistence/repository/module_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	moduledomain "github.com/Giovani-Coelho/Doti-API/internal/core/domain/module"
	gomock "github.com/golang/mock/gomock"
)

// MockModuleRepository is a mock of ModuleRepository interface.
type MockModuleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockModuleRepositoryMockRecorder
}

// MockModuleRepositoryMockRecorder is the mock recorder for MockModuleRepository.
type MockModuleRepositoryMockRecorder struct {
	mock *MockModuleRepository
}

// NewMockModuleRepository creates a new mock instance.
func NewMockModuleRepository(ctrl *gomock.Controller) *MockModuleRepository {
	mock := &MockModuleRepository{ctrl: ctrl}
	mock.recorder = &MockModuleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModuleRepository) EXPECT() *MockModuleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockModuleRepository) Create(ctx context.Context, module moduledomain.Module) (moduledomain.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, module)
	ret0, _ := ret[0].(moduledomain.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockModuleRepositoryMockRecorder) Create(ctx, module interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModuleRepository)(nil).Create), ctx, module)
}

// ListModulesByUserID mocks base method.
func (m *MockModuleRepository) ListModulesByUserID(ctx context.Context, userId string) ([]moduledomain.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModulesByUserID", ctx, userId)
	ret0, _ := ret[0].([]moduledomain.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModulesByUserID indicates an expected call of ListModulesByUserID.
func (mr *MockModuleRepositoryMockRecorder) ListModulesByUserID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModulesByUserID", reflect.TypeOf((*MockModuleRepository)(nil).ListModulesByUserID), ctx, userId)
}

// UpdateModuleName mocks base method.
func (m *MockModuleRepository) UpdateModuleName(ctx context.Context, id, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModuleName", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModuleName indicates an expected call of UpdateModuleName.
func (mr *MockModuleRepositoryMockRecorder) UpdateModuleName(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModuleName", reflect.TypeOf((*MockModuleRepository)(nil).UpdateModuleName), ctx, id, name)
}
